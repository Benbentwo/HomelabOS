#!/usr/bin/env bash

# A Taskfile is just a bash script that will be sourced and run by taskit.
#
# You can also divide your Taskfile into multiple scripts and source them
# here.
#
# NOTE: Taskit stores the names of the tasks in a TASKS array, in their
#       definition order.

# Taskit should work with set -e and/or set -u.
# (probably not with set -o pipefail though, not tested)
set -eu
VERSION=`cat VERSION`

function center() {
  termwidth="$(tput cols)"
  padding="$(printf '%0.1s' ={1..500})"
  printf '%*.*s %s %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

# A task is a function with a `Task::` prefix in its name.
Task::logo() {
  cat homelaboslogo.txt
  chmod +x ./check_version.sh
  export VERSION=`cat VERSION`
  ./check_version.sh
  printf "MOTD:\n\n" && curl -m 2 https://gitlab.com/NickBusey/HomelabOS/raw/master/MOTD || printf "Could not get MOTD"
	printf "\n\n"
}

# Builds the docker image used for HomelabOS Deployments
Task::build() {
    : @desc "Builds the Docker Image used to deploy"
  center "Preparing HomelabOS Docker Image"
  sudo docker inspect --type=image homelabos:$VERSION > /dev/null && center " Docker Image Already Built" || sudo docker build . -t homelabos:$VERSION
}

# Config - Updates the config file, and ensures the vault is encrypted.
Task::config(){
    : @desc "Creates or Updates the config file as necessary."
    echo $PWD
    Task::logo
    Task::build

    center "Creating or Updating config file"
    mkdir -p settings/passwords
    [ -f ~/.homelabos_vault_pass ] || ./generate_ansible_pass.sh
    [ -f settings/vault.yml ] || cp config.yml.blank settings/vault.yml
    [ -f settings/config.yml ] || cp config.yml.blank settings/config.yml
    # MIGRATION v0.7
    ./migrate_vault.sh
    # ENDMIGRATION
    ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i config_inventory playbook.config.yml
    center "Encrypting Secrets in the Vault"
    ./docker_helper.sh ansible-vault encrypt settings/vault.yml || true
    center "Configuration Complete"

}

# Manually forces a settings Sync via Git
Task::gitSync() {
  : @desc "Manually forces a settings sync via git"

  mkdir -p settings > /dev/null 2>&1
  # If there is a git repo, then attempt to update
  if [ -d settings/.git/ ]; then
    mkdir -p settings/.git/hooks/ > /dev/null 2>&1
    cp git_sync_pre_commit settings/.git/hooks/pre-commit
    chmod +x settings/.git/hooks/pre-commit
    cd settings
    echo "[38;5;208mGit Sync: [0m"
    git pull
    git add * > /dev/null
    git commit -a -m "Settings update" || true
    git push > /dev/null
  else
    echo "[38;5;208mWarning! You do not have a git repo set up for your settings. Make sure to back them up using some other method. https://homelabos.com/docs/setup/installation/#syncing-settings-via-git [0m"
  fi
  cd ..
}

Task::configReset() {
  : @desc "Resets the Configuration"
  Task::logo
  Task::build

  center "Reset Local Settings"
  echo "First we'll make a backup of your current settings in case you actually need them \n"
  mv settings settings.bak
  mkdir settings
  Task::config
}

# Updates all services on the HomelabOS server
Task::update() {
  : @desc "Updates all services on the HomelabOS Server"
  Task::logo
  Task::build
  Task::gitSync
  Task::config
  center "Updating HomelabOS Services"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory -t deploy playbook.homelabos.yml
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory playbook.restart.yml
  center "Update Complete"
}

# Updates the specified service on the HomelabOS server
Task::update_one(){
  : @desc "Updates the specified service on the HomelabOS server"
  : @param service "Service Name"
  Task::logo
  Task::build
  Task::gitSync
  Task::config

  ./docker_helper.sh ansible-playbook --extra-vars='{"services":["'${_service}'"]}' --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory -t deploy playbook.homelabos.yml
  ./docker_helper.sh ansible-playbook --extra-vars='{"services":["'${_service}'"]}' --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory playbook.restart.yml
}

# Uninstalls HomelabOS
Task::uninstall(){
  : @desc "Uninstalls HomelabOS"

  center "Uninstall HomelabOS Completely"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory -t deploy playbook.remove.yml
  center "Uninstall Complete"
}

# Removes One Service
Task::remove_one(){
  : @desc "Removes the specified service on the HomelabOS server"
  : @param service "Service Name"
  center "Removing data for ${_service}"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory playbook.remove.yml
  center "Removal Complete"
}

# Resets a services' data files
Task::reset_one(){
  : @desc "Resets the specified service' files on the HomelabOS server"
  : @param service "Service Name"

  center "Resetting ${_service}"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory playbook.stop.yml
	./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory playbook.remove.yml
	center "Redeploying ${_service}"
	./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory -t deploy playbook.homelabos.yml
	center "Done resetting ${_service}"
}

# Restores a server from Backups. Assuming Backups were running
Task::restore() {
  : @desc "Restore a server from backups. Assuming backups were running"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory restore.yml
}

# Run linting scripts
Task::lint(){
  center "Linting"
  ./docker_helper.sh ./lint.sh
}

# Restart All Enabled services
Task::restart(){
  : @desc "Restart all enabled services"
  center "Stopping all services"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory playbook.restart.yml
  center "Services restarting"
}

# Restart the selected service
Task::restart_one(){
  : @desc "Restarts the specified service"
  : @param service "Service Name"

  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory playbook.restart.yml
}

# Stop All Enabled services
Task::stop(){
  : @desc "Restart all enabled services"
  center "Stopping all services"
  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" -i inventory playbook.stop.yml
  center "Services restarting"
}

# Stop the selected service
Task::stop_one(){
  : @desc "Restarts the specified service"
  : @param service "Service Name"

  ./docker_helper.sh ansible-playbook --extra-vars="@settings/config.yml" --extra-vars="@settings/vault.yml" --extra-vars='{"services":["'${_service}'"]}' -i inventory playbook.stop.yml
}

# Spin up a cloud server with Terraform https://homelabos.com/docs/setup/terraform/
Task::terraform(){
  : @desc "Spin up a cloud server with Terraform"

  center "Deploying cloud server"
  ./terraform.sh
  center "Done deploying cloud server!"
}

# Destroys servers created by terraform
Task::terraform_destroy(){
  : @desc "Destroys servers created by terraform"

  center "Destroying cloud servers"
  ./docker_helper.sh /bin/bash -c "cd settings; terraform destroy"
  center "Cloud Servers destroyed"
}

# Decrypts the vault
Task::decrypt(){
  : @desc "Decrypts the vault"

  center "Decrypting Vault"
  ./docker_helper.sh ansible-vault decrypt settings/vault.yml
  center "Vault decrypted!"
}

# Encrypt the vault
Task::encrypt(){
  : @desc "Encrypts the vault"
  ./docker_helper.sh ansible-vault encrypt settings/vault.yml
}

# Set a configuration variable
Task::set(){
  : @desc "Set a configuration variable"
  : @param key "Configuration Key to set"
  : @param value "Value to set"

}

# Comments right before the task will be parsed as the task's help doc.
#
Task::mytask () {
    # Null commands that begin with '@attr ...' at the beginning of a task body
    # declare attributes for the task:

    : @desc            "A simple task"
    # Only tasks with @desc will be shown in `taskit -t`.

    # You can declare parameters for a task so that it can be run with arguments.
    : @param name!     "your name"
    : @param greeting  "words to greet with"
    : @param rest%     "rest of named arguments collected in an array"
    : @needs count-from-one  to=3           # dependency with arguments will ALWAYS be run.
    : @needs count-from-one count-from-one  # dependency without arguments only runs ONCE.

    # a non-zero exit status of a task function stops taskit from
    # running the remaining tasks. This is the default.
    : @ignore_status no

    # switch the working directory of a task; the default is no cd.
    : @cwd /tmp


    # In the code below, notice that the parameters are referenced with a '_' prefix.
    # Also, that the slurpy(%) parameter(rest) collects unknown arguments in an array.

    echo "${_greeting:-Hello}, $_name"
    echo "I'm in $PWD"
    echo
    if (( ${#_rest[*]} )); then
        echo "The rest of named arguments are:"
        local key
        for key in "${!_rest[@]}"; do
            echo "$key=${_rest[$key]}"
        done
    fi
}

Task::count-from-one () {
    : @desc "Prints whole numbers, one per line, from 1 up to 'to', inclusive."
    : @param to=5  "The number to count up to. (must be an interger >=1)"

    local i
    for (( i=1; i <= _to; i++ )); do
        echo i$
    done
}
