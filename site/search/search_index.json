{
    "docs": [
        {
            "location": "/", 
            "text": "HomelabOS\n\n\nWelcome to HomelabOS version 0.3! Your very own offline-first open-source data-center!\n\n\nHomelabOS is a collection of various separate services. You can find more information about each in the menu on the left.\n\n\nGetting Help\n\n\nIf you are having problems you can \nfile an issue on GitLab\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#homelabos", 
            "text": "Welcome to HomelabOS version 0.3! Your very own offline-first open-source data-center!  HomelabOS is a collection of various separate services. You can find more information about each in the menu on the left.", 
            "title": "HomelabOS"
        }, 
        {
            "location": "/#getting-help", 
            "text": "If you are having problems you can  file an issue on GitLab .", 
            "title": "Getting Help"
        }, 
        {
            "location": "/setup/installation/", 
            "text": "Installation\n\n\nDownload the latest version from GitLab\n.\n\n\nMake sure you have Ansible 2.5+ installed on your computer.\n\n\nEnsure you can access your server with a local IP through \npasswordless SSH\n and your user has \npasswordless sudo\n.\n\n\nFrom inside the HomelabOS folder execute the terminal command \nmake setup\n to configure your server settings.\n\n\nOnce that is done, you can run \nmake\n to have HomelabOS install itself.\n\n\nTo configure additional services, look at the options available in \ngroup_vars/all\n and override them in \nhost_vars/myserver\n.\n\n\nYou can always change settings by hand in \nhost_vars/myserver\n and re-run \nmake\n again to update the server with your new settings.\n\n\nNetwork Configuration\n\n\nIt is recommended to register an actual domain to point at your Homelab, but if you can't or would prefer not to, you can use HomelabOS fully inside your network. Simply make up a domain that ends in \n.local\n and enter that as your domain in \nhost_vars/myserver\n.\n\n\nWhen HomelabOS \nmake\n command completes, it creates a file on the server at \n/var/homelabos/homelabos_hosts\n. You can take the contents of this file and create local DNS overrides using it. All your requests should complete as expected.\n\n\nNAS Network Area Storage Configuration\n\n\nIt is a good idea to keep your files as a whole, media, documents, etc., on a Network Area Storage device or NAS.\n\n\nFor a typical HomelabOS setup you will want at least the following directories inside your NAS:\n\n\nBackups\nMusic\nMovies\nTV\nDownloads\nDocuments\n\n\n\n\nAll you have to do is enter your NAS network path, username and password into your \nhost_vars/myserver\n file. You can find the template in \nhost_vars/all\n in the \n# NAS Config\n section.\n\n\nIt should look something like this, depending on your setup:\n\n\nnas_path: //192.168.1.1/Mynas\nnas_user: guest\nnas_pass:\nnas_workgroup: WORKGROUP\n\n\n\n\nThis NAS resource will be mounted under \n/mnt/nas\n in the various containers that would benefit from access.\n\n\nAssuming you have created the folders above, for \nEmby\n for example you could point it to \n/mnt/nas/TV\n and \n/mnt/nas/Movies\n while \nPaperless\n would point at \n/mnt/nas/Documents\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/setup/installation/#installation", 
            "text": "Download the latest version from GitLab .  Make sure you have Ansible 2.5+ installed on your computer.  Ensure you can access your server with a local IP through  passwordless SSH  and your user has  passwordless sudo .  From inside the HomelabOS folder execute the terminal command  make setup  to configure your server settings.  Once that is done, you can run  make  to have HomelabOS install itself.  To configure additional services, look at the options available in  group_vars/all  and override them in  host_vars/myserver .  You can always change settings by hand in  host_vars/myserver  and re-run  make  again to update the server with your new settings.", 
            "title": "Installation"
        }, 
        {
            "location": "/setup/installation/#network-configuration", 
            "text": "It is recommended to register an actual domain to point at your Homelab, but if you can't or would prefer not to, you can use HomelabOS fully inside your network. Simply make up a domain that ends in  .local  and enter that as your domain in  host_vars/myserver .  When HomelabOS  make  command completes, it creates a file on the server at  /var/homelabos/homelabos_hosts . You can take the contents of this file and create local DNS overrides using it. All your requests should complete as expected.", 
            "title": "Network Configuration"
        }, 
        {
            "location": "/setup/installation/#nas-network-area-storage-configuration", 
            "text": "It is a good idea to keep your files as a whole, media, documents, etc., on a Network Area Storage device or NAS.  For a typical HomelabOS setup you will want at least the following directories inside your NAS:  Backups\nMusic\nMovies\nTV\nDownloads\nDocuments  All you have to do is enter your NAS network path, username and password into your  host_vars/myserver  file. You can find the template in  host_vars/all  in the  # NAS Config  section.  It should look something like this, depending on your setup:  nas_path: //192.168.1.1/Mynas\nnas_user: guest\nnas_pass:\nnas_workgroup: WORKGROUP  This NAS resource will be mounted under  /mnt/nas  in the various containers that would benefit from access.  Assuming you have created the folders above, for  Emby  for example you could point it to  /mnt/nas/TV  and  /mnt/nas/Movies  while  Paperless  would point at  /mnt/nas/Documents .", 
            "title": "NAS Network Area Storage Configuration"
        }, 
        {
            "location": "/setup/gettingstarted/", 
            "text": "Getting Started\n\n\nAlright once you are all setup and ready to go you should be able to load Organizr at \nhttp://{{ domain }}/\n.\n\n\nIf you see \n{ domain }\n in the link above, you are either viewing these docs on the hosted GitLab pages and not actually through HomelabOS, or something is configured incorrectly.\n\n\nUsing Organizr\n\n\nYou can click the \nSettings\n link, then \nEdit Tabs\n to be able to add links to all the various HomelabOS services.\n\n\nIn the very near future, HomelabOS will provision these tab links for you automatically.\n\n\nThe URLs for all the services can be found in their individual documentation section.\n\n\nHTTPS via LetsEncrypt\n\n\nHomelabOS will use Traefik's built in LetsEncrypt integration to automatically generate SSL certificates for your various services. If initially some of the certificates don't appear valid, you have likely run into \nLetsEncrypt rate limits\n. Unfortunately the only fix we have for that right now is 'wait a week'.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/setup/gettingstarted/#getting-started", 
            "text": "Alright once you are all setup and ready to go you should be able to load Organizr at  http://{{ domain }}/ .  If you see  { domain }  in the link above, you are either viewing these docs on the hosted GitLab pages and not actually through HomelabOS, or something is configured incorrectly.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/setup/gettingstarted/#using-organizr", 
            "text": "You can click the  Settings  link, then  Edit Tabs  to be able to add links to all the various HomelabOS services.  In the very near future, HomelabOS will provision these tab links for you automatically.  The URLs for all the services can be found in their individual documentation section.", 
            "title": "Using Organizr"
        }, 
        {
            "location": "/setup/gettingstarted/#https-via-letsencrypt", 
            "text": "HomelabOS will use Traefik's built in LetsEncrypt integration to automatically generate SSL certificates for your various services. If initially some of the certificates don't appear valid, you have likely run into  LetsEncrypt rate limits . Unfortunately the only fix we have for that right now is 'wait a week'.", 
            "title": "HTTPS via LetsEncrypt"
        }, 
        {
            "location": "/setup/backups/", 
            "text": "HomelabOS Backups\n\n\nHomelabOS automatically backs itself in a smart, incremental, encrypted way to any S3 compatible storage provider, using \nRestic\n and \nMinio\n.\n\n\nThis is in addition to and separate from the Backup service included within HomelabOS, which backs up your personal computers to the HomelabOS servers.\n\n\nGet access to an S3 Bucket\n\n\nIdeally you want your backups to be offsite, so really the best case scenario would be to find a friend also running HomelabOS, and trade S3 access with them.\n\n\nOr you could pay Amazon and use their S3 service, if you're into that sort of thing.\n\n\nUse your own S3\n\n\nThis method is not recommended as it is backing up to yourself which is not very useful. The usefulness here comes from Restic's snapshotting. So while this won't give you an offsite backup, it will still provide timed snapshots to access old versions of files.\n\n\nView your logs for the Minio service (homelabos_minio_1) and copy the AccessKey and SecretKeys out of the logs. Put these into your \nhost_vars/myserver\n file under the \ns3_access_key\n and \ns3_secret_key\n variables. Now login to Minio at \nhttp://minio.{{ domain }}/\n with the same access and secret key values and create a bucket called \nrestic-backups\n. Finally run \nmake update\n to copy your new settings up to your HomelabOS server.\n\n\nOf course keep in mind when self hosting your own S3, you likely want to keep good backups of the S3 data files as well.\n\n\nConfigure the Backup Service\n\n\nSet your S3 keys in \nhost_vars/myserver\n.\n\n\nOnce these are set, HomelabOS will back up all it's core data every night at 4 AM.\n\n\nRestoring Backups\n\n\nLet's say your machine gets wiped, or you want to migrate to a new machine. To restore your most recent backup, simply run \nmake restore\n. Then proceed with the normal install step of running \nmake\n and boom, you have all your data back with a fully working HomelabOS setup.\n\n\nAlternatively you can work directly with the Restic backups through it's Docker shell. Using either \nPortainer\n or your server's CLI, once you gain access to the Restic shell, you can run commands like \nrestic snapshots\n to list all your snapshots.", 
            "title": "Backups"
        }, 
        {
            "location": "/setup/backups/#homelabos-backups", 
            "text": "HomelabOS automatically backs itself in a smart, incremental, encrypted way to any S3 compatible storage provider, using  Restic  and  Minio .  This is in addition to and separate from the Backup service included within HomelabOS, which backs up your personal computers to the HomelabOS servers.", 
            "title": "HomelabOS Backups"
        }, 
        {
            "location": "/setup/backups/#get-access-to-an-s3-bucket", 
            "text": "Ideally you want your backups to be offsite, so really the best case scenario would be to find a friend also running HomelabOS, and trade S3 access with them.  Or you could pay Amazon and use their S3 service, if you're into that sort of thing.", 
            "title": "Get access to an S3 Bucket"
        }, 
        {
            "location": "/setup/backups/#use-your-own-s3", 
            "text": "This method is not recommended as it is backing up to yourself which is not very useful. The usefulness here comes from Restic's snapshotting. So while this won't give you an offsite backup, it will still provide timed snapshots to access old versions of files.  View your logs for the Minio service (homelabos_minio_1) and copy the AccessKey and SecretKeys out of the logs. Put these into your  host_vars/myserver  file under the  s3_access_key  and  s3_secret_key  variables. Now login to Minio at  http://minio.{{ domain }}/  with the same access and secret key values and create a bucket called  restic-backups . Finally run  make update  to copy your new settings up to your HomelabOS server.  Of course keep in mind when self hosting your own S3, you likely want to keep good backups of the S3 data files as well.", 
            "title": "Use your own S3"
        }, 
        {
            "location": "/setup/backups/#configure-the-backup-service", 
            "text": "Set your S3 keys in  host_vars/myserver .  Once these are set, HomelabOS will back up all it's core data every night at 4 AM.", 
            "title": "Configure the Backup Service"
        }, 
        {
            "location": "/setup/backups/#restoring-backups", 
            "text": "Let's say your machine gets wiped, or you want to migrate to a new machine. To restore your most recent backup, simply run  make restore . Then proceed with the normal install step of running  make  and boom, you have all your data back with a fully working HomelabOS setup.  Alternatively you can work directly with the Restic backups through it's Docker shell. Using either  Portainer  or your server's CLI, once you gain access to the Restic shell, you can run commands like  restic snapshots  to list all your snapshots.", 
            "title": "Restoring Backups"
        }, 
        {
            "location": "/setup/smtp/", 
            "text": "SMTP\n\n\nIn order for your applications to be able to send out emails, you\nneed an SMTP server. A nice free one is \nMailgun\n.\n\n\nCreate an account, and follow their steps to register your domain.\n\n\nOnce that is completed, you can plug the settings they provide into\nNextcloud and other apps that send emails.", 
            "title": "SMTP"
        }, 
        {
            "location": "/setup/smtp/#smtp", 
            "text": "In order for your applications to be able to send out emails, you\nneed an SMTP server. A nice free one is  Mailgun .  Create an account, and follow their steps to register your domain.  Once that is completed, you can plug the settings they provide into\nNextcloud and other apps that send emails.", 
            "title": "SMTP"
        }, 
        {
            "location": "/setup/tor/", 
            "text": "Tor\n\n\nIf you don't have a domain, or your DNS fails you, or suddenly some ports aren't mapped correctly somewhere in your network, and you can't access your services remotely, fear not! Tor is here to save the day.\n\n\nInstall Tor\n\n\nDownload Tor from the \nTor Project\n website.\n\n\nWeb Access\n\n\nEach page of the Software documentation section has a Tor URL beneath the normal URL.\n\n\nSSH Access\n\n\nMake sure you have a working \ntorify\n installation on your machine (not the server). Run \ntorify curl ifconfig.me\n to verify you can connect to Tor with \ntorify\n.\n\n\nNow append the following lines to your \n~/.ssh/config\n file:\n\n\nHost *.onion\n   ProxyCommand /usr/bin/nc -xlocalhost:9150 -X5 %h %p\n\n\n\n\nOnce that is done, you can ssh to your server with \ntorify ssh {{ ansible_user }}@{{ tor_ssh_domain }}", 
            "title": "Tor Onion Services"
        }, 
        {
            "location": "/setup/tor/#tor", 
            "text": "If you don't have a domain, or your DNS fails you, or suddenly some ports aren't mapped correctly somewhere in your network, and you can't access your services remotely, fear not! Tor is here to save the day.", 
            "title": "Tor"
        }, 
        {
            "location": "/setup/tor/#install-tor", 
            "text": "Download Tor from the  Tor Project  website.", 
            "title": "Install Tor"
        }, 
        {
            "location": "/setup/tor/#web-access", 
            "text": "Each page of the Software documentation section has a Tor URL beneath the normal URL.", 
            "title": "Web Access"
        }, 
        {
            "location": "/setup/tor/#ssh-access", 
            "text": "Make sure you have a working  torify  installation on your machine (not the server). Run  torify curl ifconfig.me  to verify you can connect to Tor with  torify .  Now append the following lines to your  ~/.ssh/config  file:  Host *.onion\n   ProxyCommand /usr/bin/nc -xlocalhost:9150 -X5 %h %p  Once that is done, you can ssh to your server with  torify ssh {{ ansible_user }}@{{ tor_ssh_domain }}", 
            "title": "SSH Access"
        }, 
        {
            "location": "/setup/vpn/", 
            "text": "VPN Setup\n\n\nThis bit is not quite automated yet, so you'll have to run the following commands on the server by hand.\n\n\n# Create config\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.{{ domain }}:1194\n\n# Create PKI\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki\n\n# Create a client (repeat as needed)\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full USERNAME nopass\n\n# Get client connection file (repeat as needed)\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient USERNAME \n USERNAME.ovpn\n\n\n\n\nOnce you run those 4 lines you will have a .ovpn file for each user. Simply copy them off of the server to your machine, and distribute as needed.", 
            "title": "VPN Setup"
        }, 
        {
            "location": "/setup/vpn/#vpn-setup", 
            "text": "This bit is not quite automated yet, so you'll have to run the following commands on the server by hand.  # Create config\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.{{ domain }}:1194\n\n# Create PKI\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki\n\n# Create a client (repeat as needed)\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full USERNAME nopass\n\n# Get client connection file (repeat as needed)\ndocker run -v /var/homelabos/openvpn:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient USERNAME   USERNAME.ovpn  Once you run those 4 lines you will have a .ovpn file for each user. Simply copy them off of the server to your machine, and distribute as needed.", 
            "title": "VPN Setup"
        }, 
        {
            "location": "/software/applehealth/", 
            "text": "Automated Apple Health Import\n\n\nHomelabOS supports automatically (kind of) importing of your data from Apple Health.\n\n\nThe non-automatic part is you have to manually create an Export from the Health app on your phone.\n\n\nOnce you upload your export to your \nNextCloud\n instance, the Apple Health cron task will pick it up within the next hour, and put all the data into \nInfluxDB\n. Now you can create nice dashboards in \nGrafana\n to visualize and inspect your Health data.\n\n\nConfiguring\n\n\nYou need to set the NextCloud username that you want to import Health Data from in your \nhost_vars/myserver\n file. This value defaults to \nadmin\n the default username created at startup by NextCloud.\n\n\nExporting\n\n\nMake sure you have NextCloud configured on your Apple device. On your Apple device open the \nHealth\n app. Click the \nToday\n tab, then click the profile icon in the top right of the screen. Now click \nExport Health Data\n. Once the export completes, save it to NextCloud. Click \nUpload\n with the default settings. It should save to your \nFiles\n folder with the name \nexport.zip\n.\n\n\nNow in under an hour you should be able to see your data in Influx via Grafana.\n\n\nDebugging\n\n\nYou can always open up \nPortainer\n and view the Logs of the \nhomelabos_apple_health_influx_1\n container to see if things are working or not.\n\n\nAccess\n\n\nThere is no direct access to this service, you can visualize the data through Grafana.", 
            "title": "Apple Health"
        }, 
        {
            "location": "/software/applehealth/#automated-apple-health-import", 
            "text": "HomelabOS supports automatically (kind of) importing of your data from Apple Health.  The non-automatic part is you have to manually create an Export from the Health app on your phone.  Once you upload your export to your  NextCloud  instance, the Apple Health cron task will pick it up within the next hour, and put all the data into  InfluxDB . Now you can create nice dashboards in  Grafana  to visualize and inspect your Health data.", 
            "title": "Automated Apple Health Import"
        }, 
        {
            "location": "/software/applehealth/#configuring", 
            "text": "You need to set the NextCloud username that you want to import Health Data from in your  host_vars/myserver  file. This value defaults to  admin  the default username created at startup by NextCloud.", 
            "title": "Configuring"
        }, 
        {
            "location": "/software/applehealth/#exporting", 
            "text": "Make sure you have NextCloud configured on your Apple device. On your Apple device open the  Health  app. Click the  Today  tab, then click the profile icon in the top right of the screen. Now click  Export Health Data . Once the export completes, save it to NextCloud. Click  Upload  with the default settings. It should save to your  Files  folder with the name  export.zip .  Now in under an hour you should be able to see your data in Influx via Grafana.", 
            "title": "Exporting"
        }, 
        {
            "location": "/software/applehealth/#debugging", 
            "text": "You can always open up  Portainer  and view the Logs of the  homelabos_apple_health_influx_1  container to see if things are working or not.", 
            "title": "Debugging"
        }, 
        {
            "location": "/software/applehealth/#access", 
            "text": "There is no direct access to this service, you can visualize the data through Grafana.", 
            "title": "Access"
        }, 
        {
            "location": "/software/bitwarden/", 
            "text": "Bitwarden\n\n\nBitwarden\n is an open source password manager. HomelabOS utilizes an Open Source clone of the Bitwarden API server, \nbitwarden_rs\n. This is primarily due to performance and complexity reasons. \nbitwarden_rs\n requires just one Docker container, whereas the official \nBitwarden\n install requires something like six different containers.\n\n\nAccess\n\n\nIt is available at \nhttps://warden.{{ domain }}/\n or \nhttp://warden.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://warden.{{ tor_domain }}/", 
            "title": "Bitwarden"
        }, 
        {
            "location": "/software/bitwarden/#bitwarden", 
            "text": "Bitwarden  is an open source password manager. HomelabOS utilizes an Open Source clone of the Bitwarden API server,  bitwarden_rs . This is primarily due to performance and complexity reasons.  bitwarden_rs  requires just one Docker container, whereas the official  Bitwarden  install requires something like six different containers.", 
            "title": "Bitwarden"
        }, 
        {
            "location": "/software/bitwarden/#access", 
            "text": "It is available at  https://warden.{{ domain }}/  or  http://warden.{{ domain }}/  It is also available via Tor at  http://warden.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/convos/", 
            "text": "Convos\n\n\nConvos\n is an always on IRC client. Login to your IRC network of choice, and Convos will stay online 24/7 for you, so you can always see any messages.\n\n\nAccess\n\n\nIt is available at \nhttps://irc.{{ domain }}/\n or \nhttp://irc.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://irc.{{ tor_domain }}/", 
            "title": "Convos"
        }, 
        {
            "location": "/software/convos/#convos", 
            "text": "Convos  is an always on IRC client. Login to your IRC network of choice, and Convos will stay online 24/7 for you, so you can always see any messages.", 
            "title": "Convos"
        }, 
        {
            "location": "/software/convos/#access", 
            "text": "It is available at  https://irc.{{ domain }}/  or  http://irc.{{ domain }}/  It is also available via Tor at  http://irc.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/darksky/", 
            "text": "Darksky\n\n\ndarksky-influxdb\n pulls in weather data for your location every 2 minutes from \nDarksky\n and saves it to your \nInfluxDB\n instance.\n\n\nYou need to get an API key first from \nDarksky\n\n\nAccess\n\n\nThere is no direct access to it, but you can create graphs in \nGrafana\n to visualize it.", 
            "title": "Darksky"
        }, 
        {
            "location": "/software/darksky/#darksky", 
            "text": "darksky-influxdb  pulls in weather data for your location every 2 minutes from  Darksky  and saves it to your  InfluxDB  instance.  You need to get an API key first from  Darksky", 
            "title": "Darksky"
        }, 
        {
            "location": "/software/darksky/#access", 
            "text": "There is no direct access to it, but you can create graphs in  Grafana  to visualize it.", 
            "title": "Access"
        }, 
        {
            "location": "/software/dasher/", 
            "text": "Dasher\n\n\nDasher\n provides support for triggering things when you press one of those free Amazon Dash buttons.\n\n\nFollow \nthe directions on how to find your Dash button's MAC address\n. Then plug that MAC address into \nhomelabos/templates/dasher.config.json\n. Edit the URL, headers and body as needed for your use case. The default example shown causes \nHome Assistant\n to toggle the Living Room lights.\n\n\nAccess\n\n\nNo direct access, but like all the images you can tail the logs in \nPortainer", 
            "title": "Dasher"
        }, 
        {
            "location": "/software/dasher/#dasher", 
            "text": "Dasher  provides support for triggering things when you press one of those free Amazon Dash buttons.  Follow  the directions on how to find your Dash button's MAC address . Then plug that MAC address into  homelabos/templates/dasher.config.json . Edit the URL, headers and body as needed for your use case. The default example shown causes  Home Assistant  to toggle the Living Room lights.", 
            "title": "Dasher"
        }, 
        {
            "location": "/software/dasher/#access", 
            "text": "No direct access, but like all the images you can tail the logs in  Portainer", 
            "title": "Access"
        }, 
        {
            "location": "/software/emby/", 
            "text": "Emby\n\n\nEmby\n is a media server. Just point it at your NAS collections of Movies and TV and you're off to the races.\n\n\nAccess\n\n\nIt is available at \nhttps://emby.{{ domain }}/\n or \nhttp://emby.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://emby.{{ tor_domain }}/", 
            "title": "Emby"
        }, 
        {
            "location": "/software/emby/#emby", 
            "text": "Emby  is a media server. Just point it at your NAS collections of Movies and TV and you're off to the races.", 
            "title": "Emby"
        }, 
        {
            "location": "/software/emby/#access", 
            "text": "It is available at  https://emby.{{ domain }}/  or  http://emby.{{ domain }}/  It is also available via Tor at  http://emby.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/firefly/", 
            "text": "Firefly III\n\n\nFirefly III\n is a money management app.\n\n\nAccess\n\n\nIt is available at \nhttps://money.{{ domain }}/\n or \nhttp://money.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://money.{{ tor_domain }}/", 
            "title": "Firefly III"
        }, 
        {
            "location": "/software/firefly/#firefly-iii", 
            "text": "Firefly III  is a money management app.", 
            "title": "Firefly III"
        }, 
        {
            "location": "/software/firefly/#access", 
            "text": "It is available at  https://money.{{ domain }}/  or  http://money.{{ domain }}/  It is also available via Tor at  http://money.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/gitea/", 
            "text": "Gitea\n\n\nGitea\n is a Git hosting platform.\n\n\nAccess\n\n\nIt is available at \nhttps://git.{{ domain }}/\n or \nhttp://git.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://git.{{ tor_domain }}/", 
            "title": "Gitea"
        }, 
        {
            "location": "/software/gitea/#gitea", 
            "text": "Gitea  is a Git hosting platform.", 
            "title": "Gitea"
        }, 
        {
            "location": "/software/gitea/#access", 
            "text": "It is available at  https://git.{{ domain }}/  or  http://git.{{ domain }}/  It is also available via Tor at  http://git.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/grafana/", 
            "text": "Grafana\n\n\nGrafana\n is a Time Series Database graphing application.\n\n\nYou can use it to visualize the Weather data imported by \ninfluxdb_darksky\n\n\nAccess\n\n\nIt is available at \nhttps://grafana.{{ domain }}/\n or \nhttp://grafana.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://grafana.{{ tor_domain }}/", 
            "title": "Grafana"
        }, 
        {
            "location": "/software/grafana/#grafana", 
            "text": "Grafana  is a Time Series Database graphing application.  You can use it to visualize the Weather data imported by  influxdb_darksky", 
            "title": "Grafana"
        }, 
        {
            "location": "/software/grafana/#access", 
            "text": "It is available at  https://grafana.{{ domain }}/  or  http://grafana.{{ domain }}/  It is also available via Tor at  http://grafana.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/homeassistant/", 
            "text": "Home Assistant\n\n\nHome Assistant\n can automate just about any part of your home.\n\n\nAccess\n\n\nIt is available at \nhttps://homeassistant.{{ domain }}/\n or \nhttp://homeassistant.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://homeassistant.{{ tor_domain }}/", 
            "title": "Home Assistant"
        }, 
        {
            "location": "/software/homeassistant/#home-assistant", 
            "text": "Home Assistant  can automate just about any part of your home.", 
            "title": "Home Assistant"
        }, 
        {
            "location": "/software/homeassistant/#access", 
            "text": "It is available at  https://homeassistant.{{ domain }}/  or  http://homeassistant.{{ domain }}/  It is also available via Tor at  http://homeassistant.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/influxdb/", 
            "text": "InfluxDB\n\n\nInfluxDB\n is the Time Series Database that \nDarksky\n writes to and \nGrafana\n can visualize.\n\n\nIt can also take data from \nHome Assistant\n and many other sources.\n\n\nAccess\n\n\nThere is no direct access, but you can access it in Grafana by creating a new InfluxDB data source pointing at host \ninfluxdb\n.", 
            "title": "InfluxDB"
        }, 
        {
            "location": "/software/influxdb/#influxdb", 
            "text": "InfluxDB  is the Time Series Database that  Darksky  writes to and  Grafana  can visualize.  It can also take data from  Home Assistant  and many other sources.", 
            "title": "InfluxDB"
        }, 
        {
            "location": "/software/influxdb/#access", 
            "text": "There is no direct access, but you can access it in Grafana by creating a new InfluxDB data source pointing at host  influxdb .", 
            "title": "Access"
        }, 
        {
            "location": "/software/jackett/", 
            "text": "Jackett\n\n\nJackett\n provides API Support for your favorite torrent trackers.\n\n\nConfiguration\n\n\nIt is important to secure Jackett! Access the Jackett dashboard with the links below,\nscroll down to the \nJackett Configuration\n section, and set a value for \nAdmin Password\n.\nHit \nSet Password\n and you should be good to go.\n\n\nSet up some indexers in the interface, and now in \nSonarr\n and \n\nRadarr\n you can setup the link to Jackett.\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://jackett.{{ domain }}/\n or \nhttp://jackett.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://jackett.{{ tor_domain }}/", 
            "title": "Jackett"
        }, 
        {
            "location": "/software/jackett/#jackett", 
            "text": "Jackett  provides API Support for your favorite torrent trackers.", 
            "title": "Jackett"
        }, 
        {
            "location": "/software/jackett/#configuration", 
            "text": "It is important to secure Jackett! Access the Jackett dashboard with the links below,\nscroll down to the  Jackett Configuration  section, and set a value for  Admin Password .\nHit  Set Password  and you should be good to go.  Set up some indexers in the interface, and now in  Sonarr  and  Radarr  you can setup the link to Jackett.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/jackett/#access", 
            "text": "The dashboard is available at  https://jackett.{{ domain }}/  or  http://jackett.{{ domain }}/  It is also available via Tor at  http://jackett.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/koel/", 
            "text": "Koel\n\n\nKoel\n is a personal music streaming server that works.\n\n\nSetup\n\n\nTo set your credentials, ssh in to your machine and run: \ndocker exec -it homelabos_koel_1 php artisan koel:init\n\n\nOr open \nPortainer\n and run \nphp artisan koel:init\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://koel.{{ domain }}/\n or \nhttp://koel.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://koel.{{ tor_domain }}/", 
            "title": "Koel"
        }, 
        {
            "location": "/software/koel/#koel", 
            "text": "Koel  is a personal music streaming server that works.", 
            "title": "Koel"
        }, 
        {
            "location": "/software/koel/#setup", 
            "text": "To set your credentials, ssh in to your machine and run:  docker exec -it homelabos_koel_1 php artisan koel:init  Or open  Portainer  and run  php artisan koel:init", 
            "title": "Setup"
        }, 
        {
            "location": "/software/koel/#access", 
            "text": "The dashboard is available at  https://koel.{{ domain }}/  or  http://koel.{{ domain }}/  It is also available via Tor at  http://koel.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/matomo/", 
            "text": "Matomo\n\n\nSetup\n\n\nDuring the setup wizard, your Database host should be \ndb\n and the database name, user, and password, all \nmatomo\n.\n\n\nAccess\n\n\nIt is available via \nhttps://matomo.{{ domain }}/\n or \nhttp://matomo.{{ domain }}/\n.\n\n\nIt is also available via Tor at \nhttp://matomo.{{ tor_domain }}/", 
            "title": "Matomo"
        }, 
        {
            "location": "/software/matomo/#matomo", 
            "text": "", 
            "title": "Matomo"
        }, 
        {
            "location": "/software/matomo/#setup", 
            "text": "During the setup wizard, your Database host should be  db  and the database name, user, and password, all  matomo .", 
            "title": "Setup"
        }, 
        {
            "location": "/software/matomo/#access", 
            "text": "It is available via  https://matomo.{{ domain }}/  or  http://matomo.{{ domain }}/ .  It is also available via Tor at  http://matomo.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/miniflux/", 
            "text": "Miniflux\n\n\nMiniflux\n is a minimalist and opinionated feed reader.\n\n\nConfiguration\n\n\nLogin to your server and run the following commands to configure Miniflux the first time.\n\n\nExecute \ndocker exec -ti homelabos_miniflux_1 /usr/local/bin/miniflux -migrate\n\n\nThen \ndocker exec -ti homelabos_miniflux_1 /usr/local/bin/miniflux -create-admin\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://rss.{{ domain }}/\n or \nhttp://rss.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://rss.{{ tor_domain }}/", 
            "title": "Miniflux"
        }, 
        {
            "location": "/software/miniflux/#miniflux", 
            "text": "Miniflux  is a minimalist and opinionated feed reader.", 
            "title": "Miniflux"
        }, 
        {
            "location": "/software/miniflux/#configuration", 
            "text": "Login to your server and run the following commands to configure Miniflux the first time.  Execute  docker exec -ti homelabos_miniflux_1 /usr/local/bin/miniflux -migrate  Then  docker exec -ti homelabos_miniflux_1 /usr/local/bin/miniflux -create-admin", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/miniflux/#access", 
            "text": "The dashboard is available at  https://rss.{{ domain }}/  or  http://rss.{{ domain }}/  It is also available via Tor at  http://rss.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/minio/", 
            "text": "Minio\n\n\nMinio is an S3 storage utility.\n\n\nConfiguration\n\n\nRefer to the \nBackup Guide\n for configuration details.\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://minio.{{ domain }}/\n or \nhttp://minio.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://minio.{{ tor_domain }}/", 
            "title": "Minio"
        }, 
        {
            "location": "/software/minio/#minio", 
            "text": "Minio is an S3 storage utility.", 
            "title": "Minio"
        }, 
        {
            "location": "/software/minio/#configuration", 
            "text": "Refer to the  Backup Guide  for configuration details.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/minio/#access", 
            "text": "The dashboard is available at  https://minio.{{ domain }}/  or  http://minio.{{ domain }}/  It is also available via Tor at  http://minio.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/monica/", 
            "text": "Monica\n\n\nMonica\n is an open source personal CRM.\n\n\nConfiguration\n\n\nThis requires some manual setup unfortunately.\n\n\nFirst make sure all the migrations have completed and that accessing the Monica URL below renders a login page.\n\n\nOnce that is done, login to your server and stop the services with \nsystemctl stop homelabos\n\n\nSpin up a monica specific app by CDing into the HomelabOS Docker folder \ncd /var/homelabos/docker\n and then running \ndocker-compose run monicahq shell\n\n\nOnce you are inside the Docker container, run \nphp artisan setup:production\n then after that's done \nexit\n the container. Now you should spin down the DB container left running with \ndocker stop docker_monicahq_db_1\n.\n\n\nNOW you should be able to access the Monica URL below again, and be presented with a registration page for the first account.\n\n\nAccess\n\n\nMonica is available at \nhttps://monica.{{ domain }}/\n or \nhttp://monica.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://monica.{{ tor_domain }}/", 
            "title": "Monica"
        }, 
        {
            "location": "/software/monica/#monica", 
            "text": "Monica  is an open source personal CRM.", 
            "title": "Monica"
        }, 
        {
            "location": "/software/monica/#configuration", 
            "text": "This requires some manual setup unfortunately.  First make sure all the migrations have completed and that accessing the Monica URL below renders a login page.  Once that is done, login to your server and stop the services with  systemctl stop homelabos  Spin up a monica specific app by CDing into the HomelabOS Docker folder  cd /var/homelabos/docker  and then running  docker-compose run monicahq shell  Once you are inside the Docker container, run  php artisan setup:production  then after that's done  exit  the container. Now you should spin down the DB container left running with  docker stop docker_monicahq_db_1 .  NOW you should be able to access the Monica URL below again, and be presented with a registration page for the first account.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/monica/#access", 
            "text": "Monica is available at  https://monica.{{ domain }}/  or  http://monica.{{ domain }}/  It is also available via Tor at  http://monica.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/nextcloud/", 
            "text": "NextCloud\n\n\nNextCloud\n is your Dropbox / Google Calendar replacement.\n\n\nConfiguration\n\n\nWhen creating the admin account, expand the \nStorage \n Database\n tab, select \nMySQL/MariaDB\n, then fill out the following information.\n\n\nDatabase User: \nnextcloud\n\nDatabase Password: \nnextcloud\n\nDatabase Name: \nnextcloud\n\nChange \nlocalhost\n to \nnextcloud_db\n\n\nHit \nFinish Setup\n\n\nAccess\n\n\nIt is available at \nhttps://nextcloud.{{ domain }}/\n or \nhttp://nextcloud.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://nextcloud.{{ tor_domain }}/", 
            "title": "NextCloud"
        }, 
        {
            "location": "/software/nextcloud/#nextcloud", 
            "text": "NextCloud  is your Dropbox / Google Calendar replacement.", 
            "title": "NextCloud"
        }, 
        {
            "location": "/software/nextcloud/#configuration", 
            "text": "When creating the admin account, expand the  Storage   Database  tab, select  MySQL/MariaDB , then fill out the following information.  Database User:  nextcloud \nDatabase Password:  nextcloud \nDatabase Name:  nextcloud \nChange  localhost  to  nextcloud_db  Hit  Finish Setup", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/nextcloud/#access", 
            "text": "It is available at  https://nextcloud.{{ domain }}/  or  http://nextcloud.{{ domain }}/  It is also available via Tor at  http://nextcloud.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/paperless/", 
            "text": "Paperless\n\n\nPaperless\n is a document management server. Point it at a folder on your NAS that your scanner is set to scan to, scan all your paper docs, have a searchable secure document archive.\n\n\nAccess\n\n\nIt is available at \nhttps://paperless.{{ domain }}/\n or \nhttp://paperless.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://paperless.{{ tor_domain }}/", 
            "title": "Paperless"
        }, 
        {
            "location": "/software/paperless/#paperless", 
            "text": "Paperless  is a document management server. Point it at a folder on your NAS that your scanner is set to scan to, scan all your paper docs, have a searchable secure document archive.", 
            "title": "Paperless"
        }, 
        {
            "location": "/software/paperless/#access", 
            "text": "It is available at  https://paperless.{{ domain }}/  or  http://paperless.{{ domain }}/  It is also available via Tor at  http://paperless.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/pihole/", 
            "text": "Pi-hole\n\n\nPi-hole\n provides network-wide ad blocking via your own Linux hardware.\n\n\nConfiguration\n\n\nLogin with the default password you set.\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://pihole.{{ domain }}/\n or \nhttp://pihole.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://pihole.{{ tor_domain }}/", 
            "title": "Pi-hole"
        }, 
        {
            "location": "/software/pihole/#pi-hole", 
            "text": "Pi-hole  provides network-wide ad blocking via your own Linux hardware.", 
            "title": "Pi-hole"
        }, 
        {
            "location": "/software/pihole/#configuration", 
            "text": "Login with the default password you set.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/pihole/#access", 
            "text": "The dashboard is available at  https://pihole.{{ domain }}/  or  http://pihole.{{ domain }}/  It is also available via Tor at  http://pihole.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/portainer/", 
            "text": "Portainer\n\n\nPortainer\n is a Docker management interface, for the more advanced user.\n\n\nAccess\n\n\nIt is available at \nhttps://docker.{{ domain }}/\n or \nhttp://docker.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://docker.{{ tor_domain }}/", 
            "title": "Portainer"
        }, 
        {
            "location": "/software/portainer/#portainer", 
            "text": "Portainer  is a Docker management interface, for the more advanced user.", 
            "title": "Portainer"
        }, 
        {
            "location": "/software/portainer/#access", 
            "text": "It is available at  https://docker.{{ domain }}/  or  http://docker.{{ domain }}/  It is also available via Tor at  http://docker.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/radarr-sonarr/", 
            "text": "Radarr / Sonarr\n\n\nRadarr\n (Automated movie downloading) and \nSonarr\n (Automated TV downloading) work esentially the same, so the documentation below applies to both.\n\n\nConfiguration\n\n\nTo make either Sonarr or Radarr work, you need to configure an\nIndexer and a Downlad Client.\n\n\nThe Indexer will be \nJackett\n. Configure\nJackett first, once that is done, in either Sonarr or Radarr, go\nto \nSettings\n then the \nIndexers\n tab, and click the Plus button.\nSelect the \nCustom\n button undernear \nTorznab\n and enter\n\nJackett\n for the name, for the URL enter \nhttp://jackett:9117/api/v2.0/indexers/all/results/torznab/\n\nand for the API Key, enter the API key that Jackett displays\non it's Dashboard.\n\n\nNext go to the \nDownload Client\n tab, toggle the \nAdvanced Settings\n\ntoggle in the top right to \nShown\n, then click the Plus button,\nselect \nTransmission\n. Enter \ntransmission\n for host,\n\n9091\n for port, and your transmission username and password in\ntheir respective fields. In Sonarr, enter \n/tv\n under \nDirectory\n\nand in Radarr enter \n/movies\n. This points to the same folders\n\nEmby\n reads from, so they should be automatically\ndetected by Emby if you set this up correctly.\n\n\nNow if you add some content, either a movie to Radarr or\na TV series to Sonarr, they will automatically be searched\nand downloaded according to your settings.\n\n\nAccess\n\n\nSonarr available at \nhttps://sonarr.{{ domain }}/\n or \nhttp://sonarr.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://sonarr.{{ tor_domain }}/\n\n\nRadarr available at \nhttps://radarr.{{ domain }}/\n or \nhttp://radarr.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://radarr.{{ tor_domain }}/", 
            "title": "Radarr / Sonarr"
        }, 
        {
            "location": "/software/radarr-sonarr/#radarr-sonarr", 
            "text": "Radarr  (Automated movie downloading) and  Sonarr  (Automated TV downloading) work esentially the same, so the documentation below applies to both.", 
            "title": "Radarr / Sonarr"
        }, 
        {
            "location": "/software/radarr-sonarr/#configuration", 
            "text": "To make either Sonarr or Radarr work, you need to configure an\nIndexer and a Downlad Client.  The Indexer will be  Jackett . Configure\nJackett first, once that is done, in either Sonarr or Radarr, go\nto  Settings  then the  Indexers  tab, and click the Plus button.\nSelect the  Custom  button undernear  Torznab  and enter Jackett  for the name, for the URL enter  http://jackett:9117/api/v2.0/indexers/all/results/torznab/ \nand for the API Key, enter the API key that Jackett displays\non it's Dashboard.  Next go to the  Download Client  tab, toggle the  Advanced Settings \ntoggle in the top right to  Shown , then click the Plus button,\nselect  Transmission . Enter  transmission  for host, 9091  for port, and your transmission username and password in\ntheir respective fields. In Sonarr, enter  /tv  under  Directory \nand in Radarr enter  /movies . This points to the same folders Emby  reads from, so they should be automatically\ndetected by Emby if you set this up correctly.  Now if you add some content, either a movie to Radarr or\na TV series to Sonarr, they will automatically be searched\nand downloaded according to your settings.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/radarr-sonarr/#access", 
            "text": "Sonarr available at  https://sonarr.{{ domain }}/  or  http://sonarr.{{ domain }}/  It is also available via Tor at  http://sonarr.{{ tor_domain }}/  Radarr available at  https://radarr.{{ domain }}/  or  http://radarr.{{ domain }}/  It is also available via Tor at  http://radarr.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/syncthing/", 
            "text": "Synchthing\n\n\nSynchthing\n is a powerful file synchronization tool. \nNextCloud\n can also do this, but Syncthing is nicer to work with servers and other people.\n\n\nAccess\n\n\nIt is available at \nhttps://sync.{{ domain }}/\n or \nhttp://sync.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://sync.{{ tor_domain }}/", 
            "title": "Synchthing"
        }, 
        {
            "location": "/software/syncthing/#synchthing", 
            "text": "Synchthing  is a powerful file synchronization tool.  NextCloud  can also do this, but Syncthing is nicer to work with servers and other people.", 
            "title": "Synchthing"
        }, 
        {
            "location": "/software/syncthing/#access", 
            "text": "It is available at  https://sync.{{ domain }}/  or  http://sync.{{ domain }}/  It is also available via Tor at  http://sync.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/thelounge/", 
            "text": "TheLounge\n\n\nTheLounge\n is a web based IRC client that syncs nicely across devices, and stays online\nwhen you aren't.\n\n\nConfiguration\n\n\nTo turn TheLounge from a public instance to a private (highly recommended) run the following commands\non your server. Run \nsed -i 's/public: true/public: false/' /var/homelabos/thelounge/config.js\n, then\nrestart the container with \ndocker restart homelabos_thelounge_1\n, then create a user with\n\ndocker exec -it homelabos_thelounge_1 thelounge add \nusername\n and follow the prompts.\n\n\nNow you should be able to login with the username and password you created at the URLs below,\nand have your session automatically sync between multiple devices.\n\n\nAccess\n\n\nThe dashboard is available at \nhttps://thelounge.{{ domain }}/\n or \nhttp://thelounge.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://thelounge.{{ tor_domain }}/", 
            "title": "The Lounge"
        }, 
        {
            "location": "/software/thelounge/#thelounge", 
            "text": "TheLounge  is a web based IRC client that syncs nicely across devices, and stays online\nwhen you aren't.", 
            "title": "TheLounge"
        }, 
        {
            "location": "/software/thelounge/#configuration", 
            "text": "To turn TheLounge from a public instance to a private (highly recommended) run the following commands\non your server. Run  sed -i 's/public: true/public: false/' /var/homelabos/thelounge/config.js , then\nrestart the container with  docker restart homelabos_thelounge_1 , then create a user with docker exec -it homelabos_thelounge_1 thelounge add  username  and follow the prompts.  Now you should be able to login with the username and password you created at the URLs below,\nand have your session automatically sync between multiple devices.", 
            "title": "Configuration"
        }, 
        {
            "location": "/software/thelounge/#access", 
            "text": "The dashboard is available at  https://thelounge.{{ domain }}/  or  http://thelounge.{{ domain }}/  It is also available via Tor at  http://thelounge.{{ tor_domain }}/", 
            "title": "Access"
        }, 
        {
            "location": "/software/transmission/", 
            "text": "Transmission\n\n\nTransmission\n is available for all your torrenting needs.\n\n\nHomelabOS uses \ndocker-transmission-openvpn\n to only connect via a VPN. It includes Tinyproxy on port 8888 to provide proxy services over the OpenVPN client connection. To disable the OpenVPN functionality replace the line \nimage: haugene/transmission-openvpn\n with \nimage: linuxserver/transmission\n in \nhomelabos/templates/docker-compose.yml\n then run \nmake\n again from the root directory to update HomelabOS with your new settings. \n\n\nAccess\n\n\nIt is available at \nhttps://torrent.{{ domain }}/\n or \nhttp://torrent.{{ domain }}/\n\n\nIt is also available via Tor at \nhttp://torrent.{{ tor_domain }}/", 
            "title": "Transmission"
        }, 
        {
            "location": "/software/transmission/#transmission", 
            "text": "Transmission  is available for all your torrenting needs.  HomelabOS uses  docker-transmission-openvpn  to only connect via a VPN. It includes Tinyproxy on port 8888 to provide proxy services over the OpenVPN client connection. To disable the OpenVPN functionality replace the line  image: haugene/transmission-openvpn  with  image: linuxserver/transmission  in  homelabos/templates/docker-compose.yml  then run  make  again from the root directory to update HomelabOS with your new settings.", 
            "title": "Transmission"
        }, 
        {
            "location": "/software/transmission/#access", 
            "text": "It is available at  https://torrent.{{ domain }}/  or  http://torrent.{{ domain }}/  It is also available via Tor at  http://torrent.{{ tor_domain }}/", 
            "title": "Access"
        }
    ]
}