###############################################################
#                   Authelia configuration                    #
###############################################################

# The port to listen on
port: 9091

# Log level
#
# Level of verbosity for logs
log_level: {{ authelia.log_level }}

# The secret used to generate JWT tokens when validating user identity by
# email confirmation.
# This secret can also be set using the env variables AUTHELIA_JWT_SECRET
jwt_secret: {{lookup('password', './settings/passwords/authelia_jwt_secret')}}

# Default redirection URL
#
# If user tries to authenticate without any referer, Authelia
# does not know where to redirect the user to at the end of the
# authentication process.
# This parameter allows you to specify the default redirection
# URL Authelia will use in such a case.
#
# Note: this parameter is optional. If not provided, user won't
# be redirected upon successful authentication.
default_redirection_url: {{ authelia.redirect_url }}

# Google Analytics Tracking ID to track the usage of the portal
# using a Google Analytics dashboard.
#
## google_analytics: UA-00000-01

# TOTP Issuer Name
#
# This will be the issuer name displayed in Google Authenticator
# See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
totp:
  issuer: {{ domain }}
  # The period in seconds a one-time password is current for. Changing this will require all users to register
  # their TOTP applications again.
  # Warning: before changing period read the docs link below.
  period: 30
  # The skew controls number of one-time passwords either side of the current one that are valid.
  # Warning: before changing skew read the docs link below.
  skew: 1
  #  See: https://docs.authelia.com/configuration/one-time-password.html#period-and-skew to read the documentation.

# Duo Push API
#
# Parameters used to contact the Duo API. Those are generated when you protect an application
# of type "Partner Auth API" in the management panel.
{% if authelia.duo.hostname %}
duo_api:
  hostname: {{ authelia.duo.hostname }}
  integration_key: {{ authelia.duo.integration_key }}
  secret_key: {{ authelia.duo.secret_key }}
{% endif %}

# The authentication backend to use for verifying user passwords
# and retrieve information such as email address and groups
# users belong to.
#
# There are two supported backends: `ldap` and `file`.
authentication_backend:
  # Disable both the HTML element and the API for reset password functionality
  disable_reset_password: false

  # File backend configuration.
  #
  # With this backend, the users database is stored in a file
  # which is updated when users reset their passwords.
  # Therefore, this backend is meant to be used in a dev environment
  # and not in production since it prevents Authelia to be scaled to
  # more than one instance.
  #
  file:
    path: /etc/authelia/userdb.yml
    ##   password:
    ##     algorithm: argon2id
    ##     iterations: 1
    ##     key_length: 32
    ##     salt_length: 16
    ##     memory: 1024
    ##     parallelism: 8

# Access Control
#
# Access control is a list of rules defining the authorizations applied for one
# resource to users or group of users.
#
# If 'access_control' is not defined, ACL rules are disabled and the `bypass`
# rule is applied, i.e., access is allowed to anyone. Otherwise restrictions follow
# the rules defined.
#
# Note: One can use the wildcard * to match any subdomain.
# It must stand at the beginning of the pattern. (example: *.mydomain.com)
#
# Note: You must put patterns containing wildcards between simple quotes for the YAML
# to be syntaxically correct.
#
# Definition: A `rule` is an object with the following keys: `domain`, `subject`,
# `policy` and `resources`.
#
# - `domain` defines which domain or set of domains the rule applies to.
#
# - `subject` defines the subject to apply authorizations to. This parameter is
#    optional and matching any user if not provided. If provided, the parameter
#    represents either a user or a group. It should be of the form 'user:<username>'
#    or 'group:<groupname>'.
#
# - `policy` is the policy to apply to resources. It must be either `bypass`,
#   `one_factor`, `two_factor` or `deny`.
#
# - `resources` is a list of regular expressions that matches a set of resources to
#    apply the policy to. This parameter is optional and matches any resource if not
#    provided.
#
# Note: the order of the rules is important. The first policy matching
# (domain, resource, subject) applies.
access_control:
  # Default policy can either be `bypass`, `one_factor`, `two_factor` or `deny`.
  # It is the policy applied to any resource if there is no policy to be applied
  # to the user.
  default_policy: {{ authelia.default.policy }}

  rules:
    - domain: portainer.{{ domain }}
      policy: one_factor

    - domain: {{ service_domain }}
      policy: bypass

    - domain: '*.{{ domain }}'
      policy: {{ authelia.default.factor_count }}

# Configuration of session cookies
#
# The session cookies identify the user once logged in.
session:
  # The name of the session cookie. (default: authelia_session).
  name: authelia_session

  # The secret to encrypt the session cookie.
  secret: {{lookup('password', './settings/passwords/authelia_session_secret')}}

  # The time in ms before the cookie expires and session is reset.
  expiration: {{ authelia.default.cookie_expiration }}  # 1 hour

  # The inactivity time in ms before the session is reset.
  inactivity: {{ authelia.default.cookie_inactivity }} # 5 minutes

  # The remember me duration.
  # Value of 0 disables remember me.
  # Value is in seconds, or duration notation. See: https://docs.authelia.com/configuration/index.html#duration-notation-format
  # Longer periods are considered less secure because a stolen cookie will last longer giving attackers more time to spy
  # or attack. Currently the default is 1M or 1 month.
  remember_me_duration: {{ authelia.max.remember_me_duration }}

  # The domain to protect.
  # Note: the authenticator must also be in that domain. If empty, the cookie
  # is restricted to the subdomain of the issuer.
  domain: {{ domain }}

  # The redis connection details
  redis:
    host: authelia_redis_1
    port: 6379

# Configuration of the authentication regulation mechanism.
#
# This mechanism prevents attackers from brute forcing the first factor.
# It bans the user if too many attempts are done in a short period of
# time.
regulation:
  # The number of failed login attempts before user is banned.
  # Set it to 0 to disable regulation.
  max_retries: {{ authelia.max.retries }}

  # The time range during which the user can attempt login before being banned.
  # The user is banned if the authenticaction failed `max_retries` times in a `find_time` seconds window.
  find_time: {{ authelia.max.retries_in_time }}

  # The length of time before a banned user can login again.
  ban_time: {{ authelia.max.retries_ban_time }}

# Configuration of the storage backend used to store data and secrets.
#
# You must use only an available configuration: local, mysql, postgres
storage:
  # The directory where the DB files will be saved
  #local:
  #  path: /var/lib/authelia/db.sqlite3

  # Settings to connect to MySQL server
  # mysql:
  #  host: 127.0.0.1
  #  port: 3306
  #  database: authelia
  #  username: authelia
  #  # This secret can also be set using the env variables AUTHELIA_STORAGE_MYSQL_PASSWORD
  #  password: mypassword

  # Settings to connect to PostgreSQL server
  postgres:
    host: authelia_postgres_1
    port: 5432
    database: my_authelia
    username: postgres
    # This secret can also be set using the env variables AUTHELIA_STORAGE_POSTGRES_PASSWORD
    password: {{lookup('password', './settings/passwords/authelia_postgres_password')}}
    sslmode: disable

# registration or a TOTP registration.
# Use only an available configuration: filesystem, gmail
notifier:
  # For testing purpose, notifications can be sent in a file
{% if not smtp.user %}
  filesystem:
    filename: /tmp/authelia/notification.txt
{% endif %}
  # Use your email account to send the notifications. You can use an app password.
  # List of valid services can be found here: https://nodemailer.com/smtp/well-known/
  ## email:
  ##   username: user@example.com
  ##   password: yourpassword
  ##   sender: admin@example.com
  ##   service: gmail

  # Use a SMTP server for sending notifications
{% if smtp.user %}
  smtp:
    username: {{ smtp.user }}
    password: {{ smtp.pass }}
    host: {{ smtp.host }}
    port: {{ smtp.port }}
    sender: {{ smtp.from_email }}
    # Subject configuration of the emails sent.
    # {title} is replaced by the text from the notifier
    subject: "[Authelia] {title}"
    ## disable_require_tls: false
    ## disable_verify_cert: false
    ## trusted_cert: ""
{% endif %}
